/*
示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
*/

/*
解法一：计数

*/
function hanmingWeight(num) {
    let count = 0;
    const strNum = String(num);
    for (let i = 0; i < strNum.length; i++) {
        if (strNum[i] == '1') {
            count++;
        }
    }
    return count;
}

console.info(`二进制串 00000000000000000000000000001011 中，共有${hanmingWeight('00000000000000000000000000001011')}位为 '1'`);
console.info(`二进制串 输入：00000000000000000000000010000000 中，共有${hanmingWeight('00000000000000000000000010000000')}位为 '1'`);


/**
 * 解法二
 */
function hanmingWeight(num) {
    let ret = 0;
    while(num) {
        n &= (n -1);
        ret++;
    }
    return ret;
}

/// 每执行一次x = x & (x-1)，会将x用二进制表示时最右边的一个1变为0，因为x-1将会将该位(x用二进制表示时最右边的一个1)变为0。
/// 因此，对 x 重复该操作，直到 x 变成 0，则操作次数即为 x 的二进制数中的 1 的数目。